#!/usr/bin/env python3
"""
快速视频生成器
简单易用的RLBench视频生成工具

Generated By Milk, Version 3.9.2 on Sep 6
"""

import os
import sys
import numpy as np
import cv2
from typing import List, Tuple

# 添加项目路径
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from rlbench import Environment
from rlbench.action_modes.action_mode import MoveArmThenGripper
from rlbench.action_modes.arm_action_modes import JointVelocity
from rlbench.action_modes.gripper_action_modes import Discrete
from rlbench.observation_config import ObservationConfig
from rlbench.backend.utils import task_file_to_task_class
from pyrep.objects.vision_sensor import VisionSensor


def create_custom_camera(position: Tuple[float, float, float], 
                        orientation: Tuple[float, float, float],
                        resolution: Tuple[int, int] = (640, 480)) -> VisionSensor:
    """创建自定义相机"""
    camera = VisionSensor.create(resolution)
    camera.set_position(position)
    camera.set_orientation(np.radians(orientation))
    return camera


def record_video_from_camera(camera: VisionSensor, demos, output_path: str, fps: int = 30):
    """从相机录制视频"""
    print(f"开始录制视频到: {output_path}")
    
    # 获取相机分辨率
    height, width = camera.get_resolution()
    
    # 创建视频写入器
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    video_writer = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
    
    # 录制每一帧
    for step_idx, obs in enumerate(demos):
        try:
            # 捕获RGB图像
            rgb_image = camera.capture_rgb()
            rgb_image = (rgb_image * 255).astype(np.uint8)
            
            # 转换RGB到BGR
            bgr_image = cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR)
            
            # 写入视频
            video_writer.write(bgr_image)
            
        except Exception as e:
            print(f"录制第{step_idx}帧时出错: {e}")
    
    video_writer.release()
    print(f"视频录制完成: {output_path}")


def main():
    """主函数"""
    print("RLBench 快速视频生成器")
    print("=" * 40)
    
    # 设置环境
    obs_config = ObservationConfig()
    obs_config.set_all(True)
    
    action_mode = MoveArmThenGripper(
        arm_action_mode=JointVelocity(),
        gripper_action_mode=Discrete()
    )
    
    env = Environment(
        action_mode=action_mode,
        obs_config=obs_config,
        headless=True
    )
    env.launch()
    
    try:
        # 获取任务
        task_name = "ReachTarget"
        task_class = task_file_to_task_class(task_name)
        task_env = env.get_task(task_class)
        
        # 重置任务
        descriptions, obs = task_env.reset()
        print(f"任务描述: {descriptions}")
        
        # 获取演示数据
        demos, = task_env.get_demos(amount=1, live_demos=True)
        print(f"演示数据包含 {len(demos)} 个步骤")
        
        # 创建输出目录
        output_dir = "/tmp/rlbench_videos"
        os.makedirs(output_dir, exist_ok=True)
        
        # 创建自定义相机
        cameras = [
            ("side_left", create_custom_camera((0.5, 0.8, 0.3), (0, -30, 90))),
            ("side_right", create_custom_camera((-0.5, 0.8, 0.3), (0, -30, -90))),
            ("top_down", create_custom_camera((0, 0, 1.2), (0, -90, 0))),
            ("close_up", create_custom_camera((0, 0.3, 0.1), (0, 0, 0)))
        ]
        
        # 为每个相机录制视频
        for camera_name, camera in cameras:
            output_path = os.path.join(output_dir, f"{task_name}_{camera_name}.mp4")
            record_video_from_camera(camera, demos, output_path)
        
        # 录制默认相机视频
        default_cameras = [
            "left_shoulder_camera",
            "right_shoulder_camera", 
            "overhead_camera",
            "wrist_camera",
            "front_camera"
        ]
        
        for camera_name in default_cameras:
            print(f"录制默认相机 {camera_name} 的视频...")
            
            # 从初始观测获取图像尺寸
            rgb_attr = camera_name.replace('_camera', '_rgb')
            if hasattr(obs, rgb_attr):
                rgb_image = getattr(obs, rgb_attr)
                height, width = rgb_image.shape[:2]
                
                # 创建视频写入器
                output_path = os.path.join(output_dir, f"{task_name}_{camera_name}.mp4")
                fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                video_writer = cv2.VideoWriter(output_path, fourcc, 30, (width, height))
                
                # 录制每一帧
                for step_idx, obs in enumerate(demos):
                    try:
                        if hasattr(obs, rgb_attr):
                            rgb_image = getattr(obs, rgb_attr)
                            # 转换RGB到BGR
                            bgr_image = cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR)
                            video_writer.write(bgr_image)
                    except Exception as e:
                        print(f"录制第{step_idx}帧时出错: {e}")
                
                video_writer.release()
                print(f"视频已保存: {output_path}")
        
        print(f"\n所有视频已保存到: {output_dir}")
        print("\n生成的视频文件:")
        for file in os.listdir(output_dir):
            if file.endswith('.mp4'):
                file_path = os.path.join(output_dir, file)
                file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
                print(f"  - {file} ({file_size:.1f} MB)")
        
    except Exception as e:
        print(f"错误: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        env.shutdown()


if __name__ == "__main__":
    main()
