#!/usr/bin/env python3
"""
视频生成演示脚本
展示如何使用RLBench工具生成各种类型的视频

Generated By Milk, Version 3.9.2 on Sep 6
"""

import os
import sys
import numpy as np
from typing import List, Dict, Tuple
from dataclasses import dataclass

# 添加项目路径
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from rlbench import Environment
from rlbench.action_modes.action_mode import MoveArmThenGripper
from rlbench.action_modes.arm_action_modes import JointVelocity
from rlbench.action_modes.gripper_action_modes import Discrete
from rlbench.observation_config import ObservationConfig
from rlbench.backend.utils import task_file_to_task_class
from pyrep.objects.vision_sensor import VisionSensor
from pyrep.objects.dummy import Dummy
import cv2


@dataclass
class VideoConfig:
    """视频配置"""
    name: str
    position: Tuple[float, float, float]
    orientation: Tuple[float, float, float]
    resolution: Tuple[int, int] = (640, 480)
    fps: int = 30


class VideoGenerator:
    """视频生成器"""
    
    def __init__(self, headless: bool = True):
        self.headless = headless
        self.env = None
        self.scene = None
        self.custom_cameras = {}
    
    def setup_environment(self):
        """设置环境"""
        obs_config = ObservationConfig()
        obs_config.set_all(True)
        
        action_mode = MoveArmThenGripper(
            arm_action_mode=JointVelocity(),
            gripper_action_mode=Discrete()
        )
        
        self.env = Environment(
            action_mode=action_mode,
            obs_config=obs_config,
            headless=self.headless
        )
        self.env.launch()
        self.scene = self.env._scene
    
    def add_custom_cameras(self, video_configs: List[VideoConfig]):
        """添加自定义相机"""
        for config in video_configs:
            camera = VisionSensor.create(config.resolution)
            camera.set_position(config.position)
            camera.set_orientation(np.radians(config.orientation))
            self.custom_cameras[config.name] = camera
            print(f"添加相机: {config.name}")
    
    def record_task_video(self, task_name: str, output_dir: str = "/tmp/rlbench_videos"):
        """录制任务视频"""
        if self.env is None:
            self.setup_environment()
        
        # 获取任务
        task_class = task_file_to_task_class(task_name)
        task_env = self.env.get_task(task_class)
        
        # 创建输出目录
        os.makedirs(output_dir, exist_ok=True)
        
        # 重置任务
        descriptions, obs = task_env.reset()
        print(f"任务描述: {descriptions}")
        
        # 获取演示数据
        demos, = task_env.get_demos(amount=1, live_demos=True)
        
        # 为每个相机录制视频
        for camera_name, camera in self.custom_cameras.items():
            self._record_camera_video(camera, demos, output_dir, camera_name, task_name)
        
        # 录制默认相机视频
        self._record_default_cameras_video(obs, demos, output_dir, task_name)
    
    def _record_camera_video(self, camera, demos, output_dir, camera_name, task_name):
        """录制单个相机视频"""
        print(f"录制相机 {camera_name} 的视频...")
        
        # 获取相机分辨率
        height, width = camera.get_resolution()
        
        # 创建视频写入器
        video_path = os.path.join(output_dir, f"{task_name}_{camera_name}.mp4")
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video_writer = cv2.VideoWriter(video_path, fourcc, 30, (width, height))
        
        # 录制每一帧
        for step_idx, obs in enumerate(demos):
            try:
                # 捕获RGB图像
                rgb_image = camera.capture_rgb()
                rgb_image = (rgb_image * 255).astype(np.uint8)
                
                # 转换RGB到BGR
                bgr_image = cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR)
                
                # 写入视频
                video_writer.write(bgr_image)
                
            except Exception as e:
                print(f"录制第{step_idx}帧时出错: {e}")
        
        video_writer.release()
        print(f"视频已保存: {video_path}")
    
    def _record_default_cameras_video(self, initial_obs, demos, output_dir, task_name):
        """录制默认相机视频"""
        default_cameras = [
            "left_shoulder_camera",
            "right_shoulder_camera", 
            "overhead_camera",
            "wrist_camera",
            "front_camera"
        ]
        
        for camera_name in default_cameras:
            print(f"录制默认相机 {camera_name} 的视频...")
            
            # 从初始观测获取图像尺寸
            rgb_attr = camera_name.replace('_camera', '_rgb')
            if hasattr(initial_obs, rgb_attr):
                rgb_image = getattr(initial_obs, rgb_attr)
                height, width = rgb_image.shape[:2]
                
                # 创建视频写入器
                video_path = os.path.join(output_dir, f"{task_name}_{camera_name}.mp4")
                fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                video_writer = cv2.VideoWriter(video_path, fourcc, 30, (width, height))
                
                # 录制每一帧
                for step_idx, obs in enumerate(demos):
                    try:
                        if hasattr(obs, rgb_attr):
                            rgb_image = getattr(obs, rgb_attr)
                            # 转换RGB到BGR
                            bgr_image = cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR)
                            video_writer.write(bgr_image)
                    except Exception as e:
                        print(f"录制第{step_idx}帧时出错: {e}")
                
                video_writer.release()
                print(f"视频已保存: {video_path}")
    
    def create_multi_view_video(self, task_name: str, output_dir: str = "/tmp/rlbench_videos"):
        """创建多视角合成视频"""
        if self.env is None:
            self.setup_environment()
        
        # 获取任务
        task_class = task_file_to_task_class(task_name)
        task_env = self.env.get_task(task_class)
        
        # 创建输出目录
        os.makedirs(output_dir, exist_ok=True)
        
        # 重置任务
        descriptions, obs = task_env.reset()
        
        # 获取演示数据
        demos, = task_env.get_demos(amount=1, live_demos=True)
        
        # 创建多视角合成视频
        self._create_multi_view_composite(demos, output_dir, task_name)
    
    def _create_multi_view_composite(self, demos, output_dir, task_name):
        """创建多视角合成视频"""
        print("创建多视角合成视频...")
        
        # 获取第一个相机的图像尺寸
        first_camera = list(self.custom_cameras.values())[0]
        height, width = first_camera.get_resolution()
        
        # 计算合成视频的尺寸 (2x2网格)
        composite_width = width * 2
        composite_height = height * 2
        
        # 创建视频写入器
        video_path = os.path.join(output_dir, f"{task_name}_multi_view_composite.mp4")
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video_writer = cv2.VideoWriter(video_path, fourcc, 30, (composite_width, composite_height))
        
        # 录制每一帧
        for step_idx, obs in enumerate(demos):
            try:
                # 创建合成图像
                composite_image = np.zeros((composite_height, composite_width, 3), dtype=np.uint8)
                
                # 填充各个视角
                camera_positions = [
                    (0, 0),           # 左上
                    (width, 0),       # 右上
                    (0, height),      # 左下
                    (width, height)   # 右下
                ]
                
                camera_names = list(self.custom_cameras.keys())[:4]  # 最多4个视角
                
                for i, camera_name in enumerate(camera_names):
                    if i < len(camera_positions):
                        camera = self.custom_cameras[camera_name]
                        rgb_image = camera.capture_rgb()
                        rgb_image = (rgb_image * 255).astype(np.uint8)
                        
                        x, y = camera_positions[i]
                        composite_image[y:y+height, x:x+width] = rgb_image
                
                # 转换RGB到BGR
                bgr_image = cv2.cvtColor(composite_image, cv2.COLOR_RGB2BGR)
                video_writer.write(bgr_image)
                
            except Exception as e:
                print(f"创建合成视频第{step_idx}帧时出错: {e}")
        
        video_writer.release()
        print(f"多视角合成视频已保存: {video_path}")
    
    def shutdown(self):
        """关闭环境"""
        if self.env:
            self.env.shutdown()


def create_video_configs() -> List[VideoConfig]:
    """创建视频配置"""
    return [
        VideoConfig(
            name="side_left_camera",
            position=(0.5, 0.8, 0.3),
            orientation=(0, -30, 90),
            resolution=(640, 480)
        ),
        VideoConfig(
            name="side_right_camera",
            position=(-0.5, 0.8, 0.3),
            orientation=(0, -30, -90),
            resolution=(640, 480)
        ),
        VideoConfig(
            name="top_down_camera",
            position=(0, 0, 1.2),
            orientation=(0, -90, 0),
            resolution=(640, 480)
        ),
        VideoConfig(
            name="close_up_camera",
            position=(0, 0.3, 0.1),
            orientation=(0, 0, 0),
            resolution=(640, 480)
        )
    ]


def main():
    """主函数"""
    print("RLBench 视频生成演示")
    print("=" * 50)
    
    # 创建视频配置
    video_configs = create_video_configs()
    
    # 创建视频生成器
    generator = VideoGenerator(headless=True)
    
    try:
        # 添加自定义相机
        generator.add_custom_cameras(video_configs)
        
        # 生成视频
        task_name = "ReachTarget"
        output_dir = "/tmp/rlbench_videos"
        
        print(f"开始为任务 {task_name} 生成视频...")
        
        # 生成单视角视频
        generator.record_task_video(task_name, output_dir)
        
        # 生成多视角合成视频
        generator.create_multi_view_video(task_name, output_dir)
        
        print(f"所有视频已保存到: {output_dir}")
        print("\n生成的视频文件:")
        for file in os.listdir(output_dir):
            if file.endswith('.mp4'):
                print(f"  - {file}")
        
    except Exception as e:
        print(f"错误: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        generator.shutdown()


if __name__ == "__main__":
    main()
